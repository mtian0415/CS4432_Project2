package simpledb.opt;

import java.util.ArrayList;
import java.util.List;
import simpledb.materialize.MergeJoinPlan;
import simpledb.parse.QueryData;
import simpledb.planner.QueryPlanner;
import simpledb.query.Plan;
import simpledb.query.Predicate;
import simpledb.query.ProductPlan;
import simpledb.query.ProjectPlan;
import simpledb.query.SelectPlan;
import simpledb.query.TablePlan;
import simpledb.record.Schema;
import simpledb.server.SimpleDB;
import simpledb.tx.Transaction;

/**
 * CS4432-Project2(Task4,5): new class created by Mi Tian, Yuchen Liu
 * This planner is used by the SimpleDB class to replace the original BasicQueryPlanner
 */
public class ExploitSortQueryPlanner implements QueryPlanner {
	// Step 1: Create a plan for each mentioned table or view
	private List<Plan> plans = new ArrayList<Plan>();
	private QueryData data;
	private Transaction trans;

	@Override
	public Plan createPlan(QueryData data, Transaction tx) {
		this.data = data;
		trans = tx;
		// Step 1: Create a plan for each mentioned table or view
		for (String tblname : data.tables()) {
			String viewdef = SimpleDB.mdMgr().getViewDef(tblname, tx);
			if (viewdef != null) {
				plans.add(SimpleDB.planner().createQueryPlan(viewdef, tx));
			} else {
				plans.add(new TablePlan(tblname, tx));
			}
		}

		// Step 2: Grab first plan
		Plan currentplan = plans.remove(0);

		// Step 3: Repeatedly add a plan to the join order
		while (!plans.isEmpty()) {
			Plan p = plans.remove(0);
			Plan mergePlan = createMergeJoinPlan(currentplan, p);
			if (mergePlan != null) {
				currentplan = mergePlan;
			} else {
				System.out.println("Merge plan failed");
				// no applicable join
				currentplan = new ProductPlan(currentplan, p);
			}
		}

		// Step 3: Add a selection plan for the predicate
		currentplan = new SelectPlan(currentplan, data.pred());

		// Step 4: Project on the field names and return
		return new ProjectPlan(currentplan, data.fields());
	}

	private Plan createMergeJoinPlan(Plan p1, Plan p2) {
		String p1Field = null, p2Field = null;
		Schema p1Sch = p1.schema();
		for (String field : p1Sch.fields()) {
			Predicate queryPreds = data.pred();
			p2Field = queryPreds.equatesWithField(p1Field = field);
			if (p2Field != null) {
				break;
			}
		}
		if (p1Field == null || p2Field == null) {
			return null;
		}
		Plan mergePlan = new MergeJoinPlan(p1, p2, p1Field, p2Field, trans);
		return mergePlan;
	}
}